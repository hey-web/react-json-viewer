{"version":3,"sources":["serviceWorker.js","components/JsonViewer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Bracket","_ref","b","react_default","a","createElement","className","ListWrapper","_ref2","children","MapWrapper","_ref3","NodeKey","_ref4","k","NodeList","_ref5","list","JsonViewer_ListWrapper","map","val","index","JsonViewer_Node","key","last","length","NodeMap","_ref6","Object","keys","count","JsonViewer_MapWrapper","Node","_ref7","_ref7$last","nodes","push","JsonViewer_NodeKey","Array","JsonViewer_Bracket","JsonViewer_NodeList","JsonViewer_NodeMap","JsonViewer","_ref8","_ref8$json","json","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","input","target","value","setState","JSON","parse","state","onKeyUp","src_components_JsonViewer","Component","ReactDOM","render","src_App_0","initialCount","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39e612ef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './JsonViewer.scss';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Bracket = ({b}) => <span className=\"bracket\">&nbsp;{b}&nbsp;</span>;\r\nconst ListWrapper = ({children}) => <section>{children}</section>;\r\nconst MapWrapper = ({children}) => <section>{children}</section>;\r\n\r\nconst NodeKey = ({k}) => (<label>{'\"' + k + '\"'}:</label>);\r\nconst NodeList = ({list}) => {\r\n  return (\r\n    <ListWrapper>\r\n      {\r\n        list.map((val, index) => {\r\n          return <Node key={index} val={val} last={index === list.length - 1}/>;\r\n        })\r\n      }\r\n    </ListWrapper>\r\n  )\r\n}\r\n\r\nconst NodeMap = (({map}) => {\r\n  let length = Object.keys(map).length;\r\n  let count = 0;\r\n  return (\r\n    <MapWrapper>\r\n      {\r\n        Object.keys(map).map(key => {\r\n          count ++;\r\n          return <Node key={key} k={key} val={map[key]} last={count === length}/>\r\n        })\r\n      }\r\n    </MapWrapper>\r\n  )\r\n})\r\n\r\nconst Node = ({k, val, last=false}) => {\r\n  let nodes = [];\r\n  if (typeof k != 'undefined') {\r\n    nodes.push(<NodeKey key={0} k={k}/>);\r\n  }\r\n  if (val instanceof Array) {\r\n    nodes.push(<Bracket b={'['}/>);\r\n    nodes.push(<NodeList key={1} list={val}/>);\r\n    nodes.push(<Bracket b={']'}/>);\r\n  } else if(val && typeof val === 'object') {\r\n    nodes.push(<Bracket b={'{'}/>);\r\n    nodes.push(<NodeMap key={1} map={val}/>);\r\n    nodes.push(<Bracket b={'}'}/>);\r\n  } else {\r\n    nodes.push(<span key={1}>{typeof val === 'string' ? '\"' + val + '\"': val}</span>);\r\n  }\r\n  return <div>{nodes}{!last&&','}</div>;\r\n}\r\n\r\n\r\nconst JsonViewer = ({json = {}}) => {\r\n  return <section className={'json-viewer'}><Node val={json} last={true}/></section>;\r\n}\r\n\r\nJsonViewer.propTypes = {\r\n  json: PropTypes.object.isRequired\r\n};\r\n\r\nexport default JsonViewer;","import React, { Component } from 'react';\nimport './App.scss';\nimport JsonViewer from './components/JsonViewer';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { json: {}};\n  }\n\n  handleInput = (e) => {\n    let input = e.target.value;\n    try{\n      this.setState({json: JSON.parse(input)});\n    }catch(e){\n      //do nothing\n    }\n  }\n  \n  render() {\n    \n    return (\n      <main className=\"App\">\n        <textarea onKeyUp={this.handleInput}>\n        </textarea>\n        <JsonViewer json={this.state.json}/>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n<App initialCount={0}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}