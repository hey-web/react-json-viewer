{"version":3,"sources":["App.module.scss","serviceWorker.js","components/Header.js","components/JsonViewer.js","App.js","index.js","components/JsonViewer.module.scss"],"names":["module","exports","App","AppBody","WorkSpace","About","Support","Contact","App-logo","App-logo-spin","App-link","Boolean","window","location","hostname","match","Header","react_default","a","createElement","href","Component","Bracket","_ref","b","className","ListWrapper","_ref2","children","MapWrapper","_ref3","CxpandBtn","_ref4","_ref4$expanded","expanded","onClick","type","NodeKey","_ref5","k","NodeList","_ref6","list","JsonViewer_ListWrapper","map","val","index","JsonViewer_Node","key","last","length","NodeMap","_ref7","Object","keys","count","JsonViewer_MapWrapper","Node","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleToggle","setState","state","_this$props","nodes","push","JsonViewer_NodeKey","Array","JsonViewer_Bracket","JsonViewer_CxpandBtn","JsonViewer_NodeList","JsonViewer_NodeMap","JsonViewer","_ref8","_ref8$json","json","styles","jsonViewer","handleInput","e","input","target","value","JSON","parse","components_Header","name","spellCheck","onKeyUp","components_JsonViewer","ReactDOM","render","src_App","initialCount","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","bracket","expand-btn"],"mappings":"2EACAA,EAAAC,QAAA,CAAkBC,IAAA,iBAAAC,QAAA,qBAAAC,UAAA,uBAAAC,MAAA,mBAAAC,QAAA,qBAAAC,QAAA,qBAAAC,WAAA,sBAAAC,gBAAA,2BAAAC,WAAA,iLCWEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wHCASC,0LAbX,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,cAAR,eACAH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,KAAK,UAAR,SACAH,EAAAC,EAAAC,cAAA,KAAGC,KAAK,YAAR,WACAH,EAAAC,EAAAC,cAAA,KAAGC,KAAK,YAAR,oBARWC,8BCCfC,EAAU,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,EAAF,OAASP,EAAAC,EAAAC,cAAA,QAAMM,UAAU,WAAhB,OAAiCD,EAAjC,SACnBE,EAAc,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,SAAF,OAAgBX,EAAAC,EAAAC,cAAA,eAAUS,IACxCC,EAAa,SAAAC,GAAA,IAAEF,EAAFE,EAAEF,SAAF,OAAgBX,EAAAC,EAAAC,cAAA,eAAUS,IACvCG,EAAY,SAAAC,GAAA,IAAAC,EAAAD,EAAEE,gBAAF,IAAAD,KAAkBE,EAAlBH,EAAkBG,QAAlB,OAA+BlB,EAAAC,EAAAC,cAAA,UAAQiB,KAAK,SAASX,UAAU,aAAaU,QAASA,GAAUD,EAAS,IAAI,MAExHG,EAAU,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,EAAF,OAAUtB,EAAAC,EAAAC,cAAA,aAAQ,IAAMoB,EAAI,IAAlB,MACpBC,EAAW,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACjB,OACEzB,EAAAC,EAAAC,cAACwB,EAAD,KAEID,EAAKE,IAAI,SAACC,EAAKC,GACb,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,CAAMC,IAAKF,EAAOD,IAAKA,EAAKI,KAAMH,IAAUJ,EAAKQ,OAAS,QAOrEC,EAAW,SAAAC,GAAW,IAATR,EAASQ,EAATR,IACbM,EAASG,OAAOC,KAAKV,GAAKM,OAC1BK,EAAQ,EACZ,OACEtC,EAAAC,EAAAC,cAACqC,EAAD,KAEIH,OAAOC,KAAKV,GAAKA,IAAI,SAAAI,GAEnB,OADAO,IACOtC,EAAAC,EAAAC,cAAC4B,EAAD,CAAMC,IAAKA,EAAKT,EAAGS,EAAKH,IAAKD,EAAII,GAAMC,KAAMM,IAAUL,QAOlEO,cACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAJ,IAChBE,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAI,GAAAO,KAAAH,KAAMH,KAIRO,aAAe,WACbN,EAAKO,SAAS,CAAChC,UAAWyB,EAAKQ,MAAMjC,YAJrCyB,EAAKQ,MAAQ,CAACjC,UAAU,GAFRyB,wEAST,IAAAS,EACcP,KAAKH,MAArBnB,EADE6B,EACF7B,EAAGM,EADDuB,EACCvB,IAAKI,EADNmB,EACMnB,KACRf,EAAY2B,KAAKM,MAAjBjC,SAEL,GAAmB,qBAARW,GAA+B,OAARA,EAChC,OAAO,KAGT,IAAIwB,EAAQ,GAmBZ,MAjBgB,oBAAL9B,GACT8B,EAAMC,KAAKrD,EAAAC,EAAAC,cAACoD,EAAD,CAASvB,IAAK,EAAGT,EAAGA,KAG7BM,aAAe2B,OACjBH,EAAMC,KAAKrD,EAAAC,EAAAC,cAACsD,EAAD,CAASzB,IAAK,EAAGxB,EAAG,OAC/B6C,EAAMC,KAAKrD,EAAAC,EAAAC,cAACuD,EAAD,CAAW1B,IAAK,EAAGd,SAAUA,EAAUC,QAAS0B,KAAKI,gBAChE/B,GAAYmC,EAAMC,KAAKrD,EAAAC,EAAAC,cAACwD,EAAD,CAAU3B,IAAK,EAAGN,KAAMG,KAC/CwB,EAAMC,KAAKrD,EAAAC,EAAAC,cAACsD,EAAD,CAASzB,IAAK,EAAGxB,EAAG,QACR,kBAARqB,GACfwB,EAAMC,KAAKrD,EAAAC,EAAAC,cAACsD,EAAD,CAASzB,IAAK,EAAGxB,EAAG,OAC/B6C,EAAMC,KAAKrD,EAAAC,EAAAC,cAACuD,EAAD,CAAW1B,IAAK,EAAGd,SAAUA,EAAUC,QAAS0B,KAAKI,gBAChE/B,GAAYmC,EAAMC,KAAKrD,EAAAC,EAAAC,cAACyD,EAAD,CAAS5B,IAAK,EAAGJ,IAAKC,KAC7CwB,EAAMC,KAAKrD,EAAAC,EAAAC,cAACsD,EAAD,CAASzB,IAAK,EAAGxB,EAAG,QAE/B6C,EAAMC,KAAKrD,EAAAC,EAAAC,cAAA,QAAM6B,IAAK,GAAmB,kBAARH,EAAmB,IAAMA,EAAM,IAAKA,IAEhE5B,EAAAC,EAAAC,cAAA,WAAMkD,GAAQpB,GAAM,YArCZ5B,aAiDJwD,EARI,SAAAC,GAAiB,IAAAC,EAAAD,EAAfE,YAAe,IAAAD,EAAR,GAAQA,EAClC,OAAO9D,EAAAC,EAAAC,cAAA,WAASM,UAAWwD,IAAOC,YAAYjE,EAAAC,EAAAC,cAAC4B,EAAD,CAAMF,IAAKmC,EAAM/B,MAAM,MC5BxD/C,cA5Cb,SAAAA,EAAYwD,GAAO,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAA3D,IACjByD,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAnD,GAAA8D,KAAAH,KAAMH,KAIRyB,YAAc,SAACC,GACb,IAAIC,EAAQD,EAAEE,OAAOC,MACrB,IACE5B,EAAKO,SAAS,CAACc,KAAMQ,KAAKC,MAAMJ,KACjC,MAAMD,MAPPzB,EAAKQ,MAAQ,CAACa,KAAM,MAFHrB,wEAgBjB,OACE1C,EAAAC,EAAAC,cAAA,QAAMM,UAAWwD,IAAO/E,KACtBe,EAAAC,EAAAC,cAACuE,EAAD,MACAzE,EAAAC,EAAAC,cAAA,QAAMM,UAAWwD,IAAO9E,SACtBc,EAAAC,EAAAC,cAAA,WAASM,UAAWwD,IAAO7E,WACzBa,EAAAC,EAAAC,cAAA,KAAGwE,KAAK,cACR1E,EAAAC,EAAAC,cAAA,YAAUyE,WAAW,QAAQC,QAAShC,KAAKsB,cAE3ClE,EAAAC,EAAAC,cAAC2E,EAAD,CAAYd,KAAMnB,KAAKM,MAAMa,QAE/B/D,EAAAC,EAAAC,cAAA,WAASM,UAAWwD,IAAO5E,OACzBY,EAAAC,EAAAC,cAAA,KAAGwE,KAAK,UADV,6BAIA1E,EAAAC,EAAAC,cAAA,WAASM,UAAWwD,IAAO3E,SACzBW,EAAAC,EAAAC,cAAA,KAAGwE,KAAK,YADV,+BAIA1E,EAAAC,EAAAC,cAAA,WAASM,UAAWwD,IAAO1E,SACzBU,EAAAC,EAAAC,cAAA,KAAGwE,KAAK,YADV,wCApCQtE,aCClB0E,IAASC,OACT/E,EAAAC,EAAAC,cAAC8E,EAAD,CAAKC,aAAc,IAAMC,SAASC,eAAe,SJ0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCKlInB1G,EAAAC,QAAA,CAAkBiF,WAAA,+BAAAyB,QAAA,4BAAAC,aAAA","file":"static/js/main.c24f5767.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__36RMK\",\"AppBody\":\"App_AppBody__sVHkP\",\"WorkSpace\":\"App_WorkSpace__1djNb\",\"About\":\"App_About__1EsVc\",\"Support\":\"App_Support__2sfbO\",\"Contact\":\"App_Contact__2kg9k\",\"App-logo\":\"App_App-logo__3qhZx\",\"App-logo-spin\":\"App_App-logo-spin__1AQgI\",\"App-link\":\"App_App-link__1X-US\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\nimport './Header.module.scss';\r\n\r\nclass Header extends Component {  \r\n  render() {\r\n    return (\r\n      <header>\r\n        <a href=\"#workspace\">JSON viewer</a>\r\n        <nav>\r\n          <a href=\"#about\">About</a>\r\n          <a href=\"#support\">Support</a>\r\n          <a href=\"#contact\">Contact</a>\r\n        </nav>\r\n      </header>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import styles from './JsonViewer.module.scss';\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Bracket = ({b}) => <span className=\"bracket\">&nbsp;{b}&nbsp;</span>;\r\nconst ListWrapper = ({children}) => <section>{children}</section>;\r\nconst MapWrapper = ({children}) => <section>{children}</section>;\r\nconst CxpandBtn = ({expanded=false, onClick}) => <button type=\"button\" className=\"expand-btn\" onClick={onClick}>{expanded?'-':'+'}</button>\r\n\r\nconst NodeKey = ({k}) => (<label>{'\"' + k + '\"'}:</label>);\r\nconst NodeList = ({list}) => {\r\n  return (\r\n    <ListWrapper>\r\n      {\r\n        list.map((val, index) => {\r\n          return <Node key={index} val={val} last={index === list.length - 1}/>;\r\n        })\r\n      }\r\n    </ListWrapper>\r\n  )\r\n}\r\n\r\nconst NodeMap = (({map}) => {\r\n  let length = Object.keys(map).length;\r\n  let count = 0;\r\n  return (\r\n    <MapWrapper>\r\n      {\r\n        Object.keys(map).map(key => {\r\n          count ++;\r\n          return <Node key={key} k={key} val={map[key]} last={count === length}/>\r\n        })\r\n      }\r\n    </MapWrapper>\r\n  )\r\n})\r\n\r\nclass Node extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {expanded: true};\r\n  }\r\n\r\n  handleToggle = () => {\r\n    this.setState({expanded: !this.state.expanded});\r\n  }\r\n\r\n  render() {\r\n    let {k, val, last} = this.props;\r\n    let {expanded} = this.state;\r\n\r\n    if (typeof val === 'undefined' || val === null) {\r\n      return null;\r\n    }\r\n\r\n    let nodes = [];\r\n    \r\n    if (typeof k != 'undefined') {\r\n      nodes.push(<NodeKey key={0} k={k}/>);\r\n    }\r\n\r\n    if (val instanceof Array) {\r\n      nodes.push(<Bracket key={1} b={'['}/>);\r\n      nodes.push(<CxpandBtn key={2} expanded={expanded} onClick={this.handleToggle}/>);\r\n      expanded && nodes.push(<NodeList key={3} list={val}/>);\r\n      nodes.push(<Bracket key={4} b={']'}/>);\r\n    } else if(typeof val === 'object') {\r\n      nodes.push(<Bracket key={1} b={'{'}/>);\r\n      nodes.push(<CxpandBtn key={2} expanded={expanded} onClick={this.handleToggle}/>);\r\n      expanded && nodes.push(<NodeMap key={3} map={val}/>);\r\n      nodes.push(<Bracket key={4} b={'}'}/>);\r\n    } else {\r\n      nodes.push(<span key={1}>{typeof val === 'string' ? '\"' + val + '\"': val}</span>);\r\n    }\r\n    return <div>{nodes}{!last&&','}</div>;\r\n  }\r\n}\r\n\r\nconst JsonViewer = ({json = {}}) => {\r\n  return <section className={styles.jsonViewer}><Node val={json} last={true}/></section>;\r\n}\r\n\r\nJsonViewer.propTypes = {\r\n  json: PropTypes.object\r\n};\r\n\r\nexport default JsonViewer;","import React, { Component } from 'react';\nimport styles from './App.module.scss';\nimport Header from './components/Header';\nimport JsonViewer from './components/JsonViewer';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {json: null};\n  }\n\n  handleInput = (e) => {\n    let input = e.target.value;\n    try{\n      this.setState({json: JSON.parse(input)});\n    }catch(e){\n      //do nothing\n    }\n  }\n  \n  render() {\n    \n    return (\n      <main className={styles.App}>\n        <Header></Header>\n        <main className={styles.AppBody}>\n          <section className={styles.WorkSpace}>\n            <a name=\"workspace\"></a>\n            <textarea spellCheck=\"false\" onKeyUp={this.handleInput}>\n            </textarea>\n            <JsonViewer json={this.state.json}/>\n          </section>\n          <section className={styles.About}>\n            <a name=\"about\"></a>\n            This is the about section\n          </section>\n          <section className={styles.Support}>\n            <a name=\"support\"></a>\n            This is the support section\n          </section>\n          <section className={styles.Contact}>\n            <a name=\"contact\"></a>\n            This is the contact section\n          </section>\n        </main>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n<App initialCount={0}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jsonViewer\":\"JsonViewer_jsonViewer__3dans\",\"bracket\":\"JsonViewer_bracket__1VykE\",\"expand-btn\":\"JsonViewer_expand-btn__2Y29I\"};"],"sourceRoot":""}